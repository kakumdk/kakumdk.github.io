{
  "content": {
    "title": "Drupal7 Simple Test case in Custom Module",
    "created": "12 Jul, 2015",
    "author": "Karthik Kumar D K",
    "views": "463",
    "summary": "Why to write test case? Very simple, in one word, Its waste of time and effort of checking something we changed in code and that effects other part, and to make sure every time what change we make that should not effect any other code, so this task can be done by our test cases",
    "content": "<p>Why to write test case? Very simple, in one word, Its waste of time and effort of checking something we changed in code and that effects other part, and to make sure every time what change we make that should not effect any other code, so this task can be done by our test cases</p>\n                                <p><strong>In this article, giving a simple test example to create a drupal test case</strong></p>\n                                <ul>\n                                    <li>Create a new PHP class that defines a test</li>\n                                    <li>Provide Drupal with meta-data about your test</li>\n                                    <li>Run your test to see if it works</li>\n                                </ul>\n                                <h4><strong>1. Start with creating a module</strong></h4>\n                                <p>Create a module \"Simple Test\" inside <code>sites/all/modules/custom/simple_test</code></p>\n                                <p>Create <code>simple_test.info</code> with the below content</p>\n                                <pre>  name = Simple test\n  core = 7.x\n</pre><p>Create <code>simple_test.module</code> with the below content</p>\n                                <pre>  &lt;?php\n  function simple_test_menu() {\n    $items = array();\n\n    $items['simple_test'] = array(\n      'title' =&gt; 'Simple Test',\n      'access callback' =&gt; TRUE,\n      'page callback' =&gt; 'simple_test_page',\n      'type' =&gt; MENU_NORMAL_ITEM,\n      'menu' =&gt; 'navigation',\n    );\n\n    return $items;\n  }\n\n  function simple_test_page() {\n    return t('Welcome to Drupal. Its simple_test..!');\n  }\n\n</pre><p>Goto the modules page <code>admin/modules</code> and enable the Simple Test module</p>\n                                <p>Next goto the page which you created just now in the module <code>/simple_test</code>, you can see \"Welcome to Drupal. Its simple_test..!\" this test which you have returned.</p>\n                                <p>And, this is what we will be testing now</p>\n                                <h4><strong>2. Use \"DrupalWebTestCase\"</strong></h4>\n                                <p>A module can have one or more test cases, they can in single file or in many other files</p>\n                                <p>All test files should have am extention as <code>.test</code> and should be named as <code>MODULENAME.test</code></p>\n                                <p>Create your new test case <code>simple_test/tests/simple_test.test</code> file.</p>\n                                <p>All functional tests in Drupal should extend the <code>DrupalWebTestCase</code> class which will provide the utility functions used to drive the test browser, helper functions for interacting with a Drupal application, and all the assertions we will use to perform our actual tests.</p>\n                                <p>Add the below code to your <code>simple_test.test</code>. </p>\n                                <pre>\n  &lt;?php\n\n  class SimpleTest extends DrupalWebTestCase {\n\n  }\n\n</pre><p>Add a <code>getInfo()</code> method to your <code>SimpleTest</code> class. This method returns an array that provides meta-data about our test that the SimpleTest module can use when displaying our test in the UI. This method is required in order for your test to work. This <code>getInfo()</code> method looks like shown below. </p>\n                                <pre>\n  public static function getInfo() {\n    return array(\n      'name' =&gt; 'Simple Test',\n      'description' =&gt; 'Tests for the Simple Test module.',\n      'group' =&gt; 'Simple Test Group',\n    );\n  }\n\n</pre><p>Now add a <code>setUp()</code> method to <code>SimpleTest</code>. This method is called when the system is preparing the environment for running our tests. In this case, we need to ensure that our module is enable during setup so that the page we want to test is available. We can do this by calling the parent classes's setUp() method and passing it an array of modules we want enabled. This <code>setUp()</code> method looks like this</p>\n                                <pre>\n  public function setUp() {\n   parent::setUp(array('simple_test'));\n  }\n\n</pre><p>Add a <code>test*()</code> method to our class. Each test case can have one or more methods whose names are prefixed with the string test. Each of these methods will be automatically called by the SimpleTest test runner, and should contain the various assertions required in order to demonstrate that this test is passing. This example will use the <code>DrupalWebTestCase::drupalGet()</code> method in order to tell the internal browser to navigate to the URL <code>/helloworld</code>. And then use the <code>DrupalWebTestCase::assertText()</code> method to verify that the string, \"Hello World ...\", exists somewhere in the HTML output of the page the internal browser is currently looking at.</p>\n                                <pre>\npublic function test_your_simple_test() {\n  $this-&gt;drupalGet('simple_test');\n  $this-&gt;assertText('Welcome to Drupal. Its simple_test..!', 'The page content is present.');\n}\n\n</pre><p>And last, we need to tell Drupal about our new test. Update your <code>simple_test.info</code> file and add the following line so that after clearing the cache the registry will contain a reference to our new <code>SimpleTest</code> class.<br>\n                            </p><pre>files[] = tests/helloworld.test\n</pre><p><br></p>\n                                <h4><strong>3. Run Test.</strong></h4>\n                                <p>Clear the cache so Drupal locates our new test(s). Navigate to Configuration &gt; Performance (admin/config/development/performance) in the Toolbar, and then clicking the \"Clear all caches\" button.</p>\n                                <p>Navigate to Modules (admin/modules) in the Toolbar. Enable the Testing module in the Core section.</p>\n                                <p>Navigate to Configuration &gt; Testing (admin/config/development/testing).</p>\n                                <p>Select the checkbox for the \"SimpleTest\" test to run all tests in this group, or alternately tip the drop down open and choose the individual test case you want to run.</p>\n                                <p>Click the \"Run tests\" button.</p>\n                                <p>A new page will open and display a progress bar while your tests run.</p>\n                                <p>Once completed, you will be directed to a page with a table that shows the results of your tests.</p>",
    "type": "Sci-Tech",
    "category": "Drupal",
    "banner394x449": "upload/banner394x449/public/testcase.jpg",
    "banner600x500": "upload/banner600x500/public/testcase.jpg",
    "banner788x443": "upload/banner788x443/public/testcase.jpg",
    "banner800x460": "upload/banner800x460/public/testcase.jpg",
    "file": "2015-07-12-drupal7-simple-test-case-custom-module.json"
  }
}