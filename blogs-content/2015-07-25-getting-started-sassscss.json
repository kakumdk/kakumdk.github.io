{
  "content": {
    "title": "Getting Started with Sass/SCSS",
    "created": "25 Jul, 2015",
    "author": "Karthik Kumar D K",
    "views": "463",
    "summary": "Sass (Syntactically Awesome Style Sheets) is a CSS preprocessor.\n\nIts somthing like, write your sass programm, compile it get your css output.",
    "content": "<p><strong>What is Sass?</strong> Sass (Syntactically Awesome Style Sheets) is a CSS preprocessor. Its somthing like, write your sass programm, compile it get your css output.</p>\n                                    <h4><strong>Prerquisites</strong></h4>\n                                    <p>We can compile sass into css with tools, in different ways, below i have mention few of these ways (Any of these tools should be installed on your machine).</p>\n                                    <ul>\n                                        <li>You require Ruby installed, then install a gem <code>gem install sass</code> and compile it by running <code>sassc example.scss output.css</code>. </li>\n                                        <li>Or, You can install Compass, and compile by using <code>compass watch example.scss output.css</code>. </li>\n                                        <li>Or,  You can also install libsass via NPM with node-sass <code>npm install node-sass</code>.</li>\n                                    </ul>\n                                    <p>Which one to use, is completelty depends on you, and the project which you are working on</p>\n                                    <p>And Using Sass helps developer writing maintainable CSS easier. You can get more done, in less code, more readably, in less time.</p>\n                                    <h3>Get into detail, how it works</h3>\n                                    <h4><strong>1. Variables</strong></h4>\n                                    <p>Sass brings variables to CSS.</p>\n                                    <p>Acceptable values for variables include numbers, strings, colors, null, lists and maps.</p>\n                                    <p>Variables in Sass are scoped using the $ symbol. Lets create our first variable:</p>\n                                    <pre>$GreyColor: #ccc;</pre><pre>body {\n    background: $GreyColor;\n}\np a {\n   color: $GreyColor;\n}\n\n<strong># Can override the variable value</strong>\nbody {\n    $GreyColor: #aaa;\n    background: $GreyColor;\n}\n\n<strong># \"!global\" which makes the variable value global value.</strong>\nbody {\n    $GreyColor: #aaa !global;\n    background: $GreyColor;\n}\n</pre><p><br></p>\n                                    <h4><strong>2. Math</strong></h4>\n                                    <p>Unlike CSS, Sass allows us to use mathematical expressions</p>\n                                    <p>Before moving forward, I want to make a note of two points with Sass math.</p>\n                                    <p>First, because the / symbol is used in shorthand CSS font properties like font: 14px/16px, if you want to use the division operator on non-variable values, you need to wrap them in parentheses like:</p>\n                                    <pre>$font: (14px/16px);</pre><p>Second, you can’t mix value units, Instead, for this particular example you could use the css calc function</p>\n                                    <pre>$width: 100% - 20px;</pre><p>Now, lets create a dynamic column declaration, based upon a base container width</p>\n                                    <pre>$container-width: 100%;\n.container {\n  width: $container-width;\n}\n.col-4 {\n  width: $container-width / 4;\n}\n\n//  Compiles to:\n//  .container {\n//   width: 100%;\n//  }\n//\n//  .col-4 {\n//      width: 25%;\n//  }\n</pre><p><br></p>\n                                    <h4><strong>3. Functions</strong></h4>\n                                    <p>In my opinion its good to use it’s built in functions. You can see the full list <a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\">here</a>. It is <em>EXTENSIVE</em>.</p>\n                                    <h4><strong>4. Nesting</strong></h4>\n                                    <p>This concept, way of working with this will be understood by seeing the sample code.</p>\n                                    <pre>a.myAnchor {\n    color: blue;\n    &amp;:hover {\n        text-decoration: underline;\n    }\n    &amp;:visited {\n        color: purple;\n    }\n}\n\n// on compiling this we get output as\n// a.myAnchor { color: blue; }\n// a.myAnchor:hover { color: blue; text-decoration: underline; }\n// a.myAnchor:visited { color: purple; }\n</pre><p>\n                                        <br></p>\n                                    <h4><strong>5. Imports</strong></h4>\n                                    <p>through this concept you can break you sass files and include them into single file.</p>\n                                    <pre>@import \"grids.scss\";</pre><p>One more important thing, Sass compilers also include a concept called “partials”. If you prefix a .sass or .scss file with an underscore, it will not get compiled to CSS. This is helpful if your file only exists to get imported into a master style.scss and not explicitly compiled.</p>\n                                    <h4><strong>6. Extends &amp; Placeholders</strong></h4>\n                                    <p>In Sass, the @extend directive is an way to inherit already existing styles.</p>\n                                    <pre>.input {\n  border-radius: 3px;\n  border: 4px solid #ddd;\n  color: #555;\n  font-size: 17px;\n  padding: 10px 20px;\n  display: inline-block;\n  outline: 0;\n}\n\n.error-input {\n  @extend .input;\n  border:4px solid #e74c3c;\n}\n</pre><p>\n                                        <br></p>\n                                    <h4><strong>7. Mixins and Function Directives</strong></h4>\n                                    <p>These are very important things in sass, and can be rapidly used., i will just give one sample about these.</p>\n                                    <pre><strong># mixin</strong>\n.container {\n    width: 900px;\n    @include media(\"(max-width: 767px)\"){\n        width: 100%;\n    }\n}\n\n<strong># function directive</strong>\n@function getColumnWidth($width, $columns,$margin){\n    @return ($width / $columns) - ($margin * 2);\n}\n\n$container-width: 100%;\n$column-count: 4;\n$margin: 1%;\n\n.container {\n  width: $container-width;\n}\n\n.column {\n  background: #1abc9c;\n  height: 200px;\n  display: block;\n  float: left;\n  width: getColumnWidth($container-width,$column-count,$margin);\n  margin: 0 $margin;\n}\n</pre><p>Thank you</p>",
    "type": "Sci-Tech",
    "category": "Css",
    "banner394x449": "upload/banner394x449/public/hwr7c2c2najfq9p5ie5k.jpg",
    "banner600x500": "upload/banner600x500/public/hwr7c2c2najfq9p5ie5k.jpg",
    "banner788x443": "upload/banner788x443/public/hwr7c2c2najfq9p5ie5k.jpg",
    "banner800x460": "upload/banner800x460/public/hwr7c2c2najfq9p5ie5k.jpg",
    "file": "2015-07-25-getting-started-sassscss.json"
  }
}